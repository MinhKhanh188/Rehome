// back-end/src/models/User.js
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  passwordHash: { type: String },
  loginProvider: { type: String, enum: ['local', 'google'], default: 'local' },
  coin: { type: Number, default: 0 },
  uniqueId: { type: String, required: true, unique: true },
  profilePic: { type: String },
  phoneNumber: { type: String },
  facebookUrl: { type: String },
  location: { type: String },
  isVerified: { type: Boolean, default: false },
  isAdmin: { type: Boolean, default: false },
  resetCode: { type: String },
  resetCodeExpires: { type: Date },
}, { timestamps: true });

module.exports = mongoose.model('users', userSchema);

// back-end/src/models/SavedItem.js
const mongoose = require('mongoose');

const savedItemSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'users', required: true },
    productId: { type: mongoose.Schema.Types.ObjectId, ref: 'posts', required: true },
    savedAt: { type: Date, default: Date.now }
  });
  
  module.exports = mongoose.model('savedItems', savedItemSchema);
  
  // back-end/src/models/Province.js
const mongoose = require('mongoose');

const provinceSchema = new mongoose.Schema({
    name: { type: String, required: true }
});

module.exports = mongoose.model('provinces', provinceSchema);

// back-end/src/models/Post.js
const mongoose = require('mongoose');

const postSchema = new mongoose.Schema({
  name: { type: String, required: true },
  categoryId: { type: mongoose.Schema.Types.ObjectId, ref: 'categories', required: true },
  province: { type: mongoose.Schema.Types.ObjectId, ref: 'provinces', required: true },
  description: { type: String },
  specifications: {
    type: Map,
    of: String,
    default: {},
  },
  productStatus: { type: String, enum: ['Mới', 'Like-new', 'Cũ'], required: true },
  price: { type: Number, required: true },
  originalPrice: { type: Number },
  images: [{ type: String }],
  sellerId: { type: mongoose.Schema.Types.ObjectId, ref: 'users', required: true },
  address: { type: String, required: true },
  mapUrl: { type: String },
  status: { type: String, enum: ['available', 'sold', 'pending', 'hidden'], default: 'pending' },
  isChecked: { type: Boolean, default: false },
  isVip: { type: Boolean, default: false },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('posts', postSchema);

// back-end/src/models/Message.js
const mongoose = require('mongoose');

const messageSchema = new mongoose.Schema({
  conversationId: { type: mongoose.Schema.Types.ObjectId, ref: 'conversations', required: true },
  senderId: { type: mongoose.Schema.Types.ObjectId, ref: 'users', required: true },
  text: { type: String, required: true },
  sentAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('messages', messageSchema);

// back-end/src/models/Conversation.js
const mongoose = require('mongoose');

const conversationSchema = new mongoose.Schema({
  participants: [
    { type: mongoose.Schema.Types.ObjectId, ref: 'users', required: true }
  ],
  createdAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('conversations', conversationSchema);


// back-end/src/models/CoinTransaction.js
const mongoose = require('mongoose');

const coinTransactionSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'users', required: true },
  type: { type: String, enum: ['topup', 'deduct', 'post'], required: true },
  amount: { type: Number, required: true },
  description: { type: String },
  createdAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('coinTransactions', coinTransactionSchema);


// back-end/src/models/Category.js
const mongoose = require('mongoose');

const categorySchema = new mongoose.Schema({
    name: { type: String, required: true }
  }, { timestamps: true });
  
  module.exports = mongoose.model('categories', categorySchema);
  